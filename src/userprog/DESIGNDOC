             +--------------------------+
             | CS 140                   |
             | PROJECT 2: USER PROGRAMS |
             | DESIGN DOCUMENT          |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Gavin Bird <gbird@stanford.edu>
Wen Hao Lui <whlui@stanford.edu>
Solomon Sia <solomon5@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* capture pre-processed arguments from process_execute() to pass to 
start_process() and load() */
New struct process_info:
  char** argv;          /* command-line arguments */
  char* filename;       /* name of the executable */ 
  char* page_addr;      /* base address of page allocated for command line */
  int argc;             /* argument count */


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We did the argument pre-processing in process_execute. This included tasks like
string tokenization and file making. We also stored the addresses of the
tokenized arguments using the page allocated for the command line. The
information is then stored in a process_info struct, which is passed to
start_process and load as an argument.

We populate the stack right after the stack has been set up in load, pushing in
the arguments in reverse order. We then word-align the stack pointer before
pushing in the address of the arguments and the argument count. We know the
total number of arguments bcause we had done a count in the earlier
pre-processing for process_execute.

We check for possible stack overflows in the pre-processing step. While placing
argument addresses in the page allocated for the command line, we do a quick
address check to ensure that the total space taken by the arguments, their
addresses, and the argument count variable all fit under a page. If they do
not, we simply exit process_execute with a TID_ERROR.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Strtok_r() is reentrant which prevents potential race conditions when
working with multiple threads and processors.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The shell can perform various expansions on different parts of each
command,resulting in a list of pathnames and fields to be treated as a command
and arguments. This allows for more flexible chaining of commands.

The shell allows for redirection operators, token operations, aliases, simple
and compound commands.

Reference: http://pubs.opengroup.org/onlinepubs/7908799/xcu/chap2.html

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Struct containing process-related information.
 * This is separate from the main thread struct because we need
 * this information to persist even if the current thread exits.  */
New struct process:
  int pid;
  int exit_status;                    /* Process's exit status */
  struct condition cond_on_child;     /* Used in wait. */
  struct semaphore exec_child;        /* Used in exec. */
  struct list_elem elem;              /* For inclusion in a list */
  struct thread* thread;              /* The process's one thread */
  bool finished;                      /* Indicates if exit_status is valid */
  /* For checking if we are dealing with a valid process struct */
  unsigned magic;                     

/* Struct containing a file opened by a thread and a reference to it
 * for the list. */
New struct opened_file:
	struct file *f;                 
	int fd;                         /* file descriptor */
	struct list_elem elem;

Additions to struct thread:
    uint32_t *pagedir;                  /* Page directory. */
    struct list file_list;              /* List of files owned by process. */
    struct list child_list;             /* List of children processes. */
    struct lock child_list_lock;        /* Lock for child list. */
    struct process* process;            /* Pointer to own process. */
    struct thread * parent;             /* Parent process. */
    int next_fd;                        /* Descriptor for next file. */
    struct file * executable;           /* Executable for thread. */

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each file descriptor references a data structure that contains details of the
opened file. File descriptors are only unique within the process. Across the
OS, the same file could have multiple file descriptors.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

pagedir_get_page is called once when setting up a new stack for the process. We
also call pagedir_get_page when doing a memory check. We do 2 memory checks in
the system call handler to ensure validity of argument addresses. Assuming the
full page of data is in contiguous memory address space, we then need 2 checks
for the data (at the start and end) in user space, and two checks for the
data's new location in kernel space. This makes for a total of 7 checks. This
is the minimum number. However, if all 4096 bytes of data are in disjointed
spaces, we will need 3 + 4096 x 2 = 8195 page table inspections.

If there are 2 bytes of data, both the minimum and maximum number of
inspections is 7.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Upon wait being called, the current thread grabs the child process from its
list of child processes and waits upon the child's condition variable. When the
child process terminates either from the exit syscall or from the kernel
process, it signals the same condition variable so that the parent can wake up,
ending the wait syscall.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Errors that slip through the net of checks are caught via interrupts (e.g. page
faults) in the kernel. This allows us to catch bad pointer values and terminate
the process before the process performs any illegal access. We then call the
exit syscall when we detect an error.

Calling exit when we detect an error allows us to free allocated resources
as gracefully as possible. For example, in the exit function, open file
descriptors are closed and freed, the file process is closed and freed,
the parent process is signalled which allows the parent to close the
process struct (if the parent is waiting).

Finally, error handling is embedded within the function, to prevent an
overload of visible error handling code. When an error is detected, we
take care to free all unfreed resources when we use the exit syscall.
An example is the check_memory function which detects bad pointers, the
check_memory function itself is within individual syscalls.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

The exec system call waits on a semaphore (contained in the child's process
struct) that is signalled when the new executable completes loading. If the
child process could not be started at all, process_executes returns with a -1
error value directly. If the child process starts but fails to initialize
properly, it sets its exit status in the process struct to -1 before signalling
the semaphore and exiting. Since the parent process waits on the semaphore
before returning from exec, it would catch the error codes from both of the
mentioned cases.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Each parent process maintains a list of child process structs. All parents and
children need to acquire a lock on the list before they can wait or exit
respectively. This prevents data races.

When P waits on C, it first checks C's exit status in the process struct to see
if it has already exited. If so, P can safely release the lock on the children
list and return with the exit status. If C has not exited, it waits on a
condition variable in C's process struct, which is signalled when C exits. This
allows P to return with C's exit status.

Each process is in charge of freeing its own resources when in exits, execept
for the process struct which contains information that the parent needs. The
parent process P frees the struct either when it calls wait on that particular
process, or when P itself exits and frees all process structs in its list.
Thus, if P terminates without waiting before C exits, the process struct for C
is freed when P exits and C is left with a NULL pointer to its own struct.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We have set it so the directory of inodes contains all files that are in
use, while each process has its own file descriptors and pointers to its
files. It is good because the directory allows synchronisation of file
permissions (e.g. deny write), while each process individually keeps track
of the file it has open and currently has access to.

Disadvantages would be the added space requirements for each process to hold
file information and the overheads of synchronization.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change the tid_t to pid_t mapping.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

They were all manageable. The total time taken was about 25 hours per person.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Working on the syscalls was useful to help us understand file management.
Wait and exec were even more useful as we learned how child processes, files
and executables were managed.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

The documentation for this project is once again very good. More help could
be given to suggest the types of locks and lists that might be required for
a good implementation.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Did not use the TAs for this project.

>> Any other comments?

No.
