        +---------------------------+
		    | CS 140                    |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	DESIGN DOCUMENT           |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Solomon Sia <solomon5@stanford.edu>
Gavin Bird <gbird@stanford.edu>
Wen Hao Lui <whlui@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Each frame has its own frame data struct, and each page has its own supplemental page table entry as well.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?



---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Struct containing an mmaped file opened by a thread and a reference to it
 for the hash. */
struct mmap_file
{
    int num_bytes;                 /* Length of mmap_file in bytes. */
	struct file *file;             /* Actual file. */
	void * vaddr;                  /* Beginning of map. */
	mapid_t mapping;               /* Map id. */
	bool is_segment;               /* True if segment. */
	struct hash_elem elem;         /* Hash element. */
};

This struct contains all of the information associated with a mapped file.
Is_segment is true if it is not an actual mapping but a data segment 
(described below).

These two fields were added to the thread struct in thread.h:

mapid_t next_mapping;               /* Mapping for next file. */
struct hash mmap_hash;              /* Hash for mmap files. */

Next_mapping is incremented for each mapping to guarantee a unique id
for each one. Mmap_hash stores all of the mmap_files associated with a
process. 

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

When mmap is called, we don't actually read any data into the addresses that
are passed to mmap (as that wouldn't be lazy). We simply put new pages in the
supplemental page table and have them all point to the mmap struct which
contains information about the mmap. When we have a page fault on any page in
the mmap, we read the relevant information into the correct virtual addresses.

When we are evicting a frame we have five different cases. The first case
is when a frame is not dirty. This is the easiest to deal with - with simply
remove the frame and allow the process to create a new clean frame in the
event of a page fault. The second case is when a frame is unmapped but dirty.
In this case we have to write the data to the swap table to ensure its
preservation. The third case is when a frame is mapped to a file and is dirty.
In this case we write the data back to the file. The fourth case is when the
frame is "mapped" to a non-writable segment (described below). In this case,
we simply remove the frame without writing it anywhere, as the data can always
be reread from the segment. The fifth case is when the frame is "mapped" to
a writable segment. In this case we write the data to swap, as we don't want
to overwrite the original segment, as this isn't actually a memory mapped
file.


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

When creating a new mapped file, we check that all of the pages that it is
using are not already in the supplemental page table of the current thread.
If they are, this means that this page is already being used for something
else (such as another mapped file, the code segment, or the stack) and we
cannot allow mapping at that location.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Our implementation shares most of the code. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

As usual, this assignment was great! It took a lot of work, but all of it
was useful.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, we all feel like we now really understand virtual memory and memory
mapped files.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I think the rationale behind page pinning and the situations in which
it is necessary could have been explained a little better. We only really
understood it after someone asked a question on Piazza.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

Thank you!
