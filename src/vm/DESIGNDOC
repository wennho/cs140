        +---------------------------+
		    | CS 140                    |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	DESIGN DOCUMENT           |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Solomon Sia <solomon5@stanford.edu>
Gavin Bird <gbird@stanford.edu>
Wen Hao Lui <whlui@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Frame table. */
struct frame_table
{
   struct list list;                  /* Frame list. */
   struct hash hash;                  /* Frame hash. */
   struct list_elem * clock_pointer;  /* Used for eviction. */
   struct lock lock;                  /* Frame table lock. */
};

/* Individual frame data. */
struct frame
{
   void* paddr;                 /* Physical address of frame. */
   struct hash_elem hash_elem;  /* Hash element. */
   struct list_elem list_elem;  /* List element. */
   unsigned magic;              /* Used for detecting corruption. */
};

/* Supplemental page data. */
struct page_data
{
  struct hash_elem hash_elem;      /* Hash table element. */
  void *vaddr;                     /* Virtual address. */
  unsigned magic;                  /* Detects stack overflow. */
};

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Each frame has its own frame data struct, stored in a hash table using the
frame's address for the hash. Each process also has its own page directory,
which stores the mapping from page virtual addresses to the frame address.

Whenever we create a frame for a page, we update our process's page directory.
Similarly, when we evict or deallocate a frame, we remove the entry from the
process's page directory. This ensures that the page directory has an accurate
listing of page-to-frame mappings at all time.

When code tries to access the data of a given page, it checks the page
directory for the frame address to get the data. If the page directory does not
contain a mapping for the page, it raises a page fault exeception. The page
fault handler then fetches the missing page from swap, from file, or by
creating a new empty page, depending on the page fault conditions.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We avoid the issue by only using user virtual addresses to access and write
data to the frame. Kernel virtual addresses are only used for keeping track of
frames in the frame table, and for implementing eviction policy.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Both our frame table and swap table have a lock to prevent concurrent access or
modification to the respective tables. palloc_get_page, which we use for
getting a new page, internally uses its own lock for the getting a page from
the pool, so there are no race coditions there either.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We used a hash table for our frame table and supplemental page table so that we
can have constant time lookups via frame addresses and page virtual addresses.
In addition, we place frame entries in a list so that we can use the clock
algorithm when deciding on a frame to evict. We cannot use an iterator over the
hash table entries, since such an iterator will be invalidated once
insertions/deletions are made to the hash table.


		       PAGING TO AND FROM DISK
		       =======================
---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Swap table. */
struct swap_table
{
   struct bitmap* bitmap;      /* Bitmap showing available pages.
                                A bit is false if the slot is available. */
   struct block * swap_block;  /* Swap block. */
   struct lock lock;           /* Swap table lock. */
};

New in struct page_data (supplemental page table entry):
  bool is_in_swap;                 /* True if page in swap table. */
  block_sector_t sector;           /* First sector of block if in block. */
  bool is_writable;                /* True if page is writable. */
  bool is_dirty;                   /* True if page is dirty. */
  bool is_pinned;                  /* True if page is pinned. */
  struct lock lock;                /* Hold this lock before modifying data */
  uint32_t *pagedir;               /* Stored in this page directory */  
  
New in struct frame (frame table entry):
   struct page_data *data;      /* Supplemental page entry linked to frame */

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We implemented the clock algorithm. When a frame needs to be evicted, a clock
pointer iterates through the list in a circular motion (goes back to the front
if it reaches the end). For each frame it finds that is accessed recently, it
sets it to not accessed. It stops when it finds a frame that is not accessed
recently and is not pinned, choosing the frame for eviction.

Pinned frames are not evicted.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Each process has a unique supplemental page table and page directory. The page
directory contains the mappings from virtual to physical addresses. When
process P evicts process Q's frame, it clears process Q's page directory entry
for the virtual address in Q corresponding to the evicted frame. Additionally,
if the evicted frame is dirty, we write it to the swap disk and set a flag in
the supplemental page table entry indicating that the page is in swap.

Future accesses to that address by Q will cause a page fault, causing the page
fault handler to page in the frame if it was swapped out, or create a new frame
if the eviction was done without swapping.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Our heuristic allows stack growth if the following conditions are met:
- The faulting address is less than 32 bytes below the stack pointer.
- The page fault is caused by user access
- The page fault is caused by a write access

We chose 32 bytes because the furthest below the stack pointer we can attempt a
legal write is 32 bytes, due to the PUSHA instruction. It is always an error to
read from unallocated pages (i.e. pages without entries in the supplemental
page table). Kernel accesses have a separate memory-checking mechanism, and the
kernel has no need for user stack growth.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We use locks for our critical sections and shared data structures. We have
locks for the frame table, swap table, filesystem, and supplemental page table
entries. These locks prevent different threads from accessing/modifying data at
the same time, preventing race conditions.

Since the frame and swap tables are a global shared resource, we need a lock on
the entire table so that diffferent processes can insert/remove entries safely.
We do not need such a lock for the supplemental page table because only the
process that owns it will modify the table itself. Other processes that evict
pages modify the supplemental page table entry and not the table, so we only
need a lock on the supplemental page table entry.

The four conditions of deadlock are as follows:
-Limited access: resources cannot be shared.
-No preemption. Once given, a resource cannot be taken away.
-Multiple independent requests: threads don't ask for resources all at once (hold resources while waiting).
-A circularity in the graph of requests and ownership

To prevent deadlock, we eliminate circularities in our code by having a strict
ordering in lock acquisition and release. For example, when evicting frames, we
acquire the evicted page's supplemental page table entry lock before the frame
table lock and release the locks in reverse order. We follow the same ordering
in other code sections like loading the missing frame for a page, thereby
preventing circularities.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Each supplemental page table entry has its own lock which must be acquired
before accessing or modifying the data it contains. In this scenario, when P
evicts Q's frame, it needs to acquire a lock on the supplemental page table
entry for Q's frame. Since Q cannot acquire the same lock, it will have to wait
for P's eviction to complete before it faults the page in. If Q is faulting the
page in, P will have to wait for the lock on the supplemental page table entry
and can only evict the page after Q faults it in. When it is Q's turn to
execute, it finds that the page it just faulted in is missing again, and simply
attempts to fault it in again.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We implement pinning when reading in frames from the file system or swap, and
remove pinning once reading is complete. This means that frames which are being
read will not be the targets of eviction, and will successfully be read in
before they can be evicted.


>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We use lazy loading so that all pages are accessed at the point they are
required. Pages that are being read in from the filesystem are also pinned so
that they will not be evicted and cause a page fault for the reading process,
which is still holding a lock for the device driver.

Page faults bring in pages (as in user programs) as they are accessed. To
gracefully handle attempted accesses to invalid virtual addresses, we execute
memory checks to ensure that the memory is valid for the type of access. If the
memory is invalid, we call exit which frees up all resources, and return an
exit status of -1.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We definitely used as many locks are required. We felt that parallelism
was important, and having several locks with the proper naming helped to
keep our code readable and intelligible. We feel a single lock for the whole
system is not very intelligent. Locks such as the page data struct lock 
may have been overkill since it is a lock that only looks after a single
page_data struct, but it helped to improve parallelism.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Struct containing an backed file opened by a thread and a reference to it
 for the hash. */
struct backed_file
{
    int num_bytes;                 /* Length of mmap_file in bytes. */
	struct file *file;             /* Actual file. */
	void * vaddr;                  /* Beginning of map. */
	mapid_t id;                    /* Backed file/mapping id. */
	bool is_segment;               /* True if segment. */
	struct hash_elem elem;         /* Hash element. */
};

This struct contains all of the information associated with a backed file.
Is_segment is true if it is not an mapped file but a data segment
(described below).

New in struct thread (in thread.h):
  mapid_t next_backed_file_id;        /* Mapping for next backed_file. */
  struct hash backed_file_hash_table; /* Hash for backed files. */

Next_backed_file_id is incremented for each file to guarantee a unique id
for each one. backed_file_hash_table stores all of the backed_files 
associated with a process. 

New in struct page_data (supplemental page table entry):
  struct backed_file* backing_file;  /* Mmaped_file or executable file. */
  int file_offset;                 /* Offset for backed files. */
  int readable_bytes;              /* Readable bytes in backed_file. */
  bool is_mapped;                  /* True if page is mapped. */

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

When mmap is called, we don't actually read any data into the addresses that
are passed to mmap (as that wouldn't be lazy). We simply put new pages in the
supplemental page table and have them all point to a backed_file struct which
contains information about the mmap. When we have a page fault on any page in
the mmap, we read the relevant information into the correct virtual addresses.

When we are evicting a frame we have five different cases. The first case
is when a frame is not dirty. This is the easiest to deal with - with simply
remove the frame and allow the process to create a new clean frame in the
event of a page fault. The second case is when a frame is unmapped but dirty.
In this case we have to write the data to the swap table to ensure its
preservation. The third case is when a frame is backed by a file and is dirty.
In this case we write the data back to the file. The fourth case is when the
frame is "backed" by a non-writable segment (described below). In this case,
we simply remove the frame without writing it anywhere, as the data can always
be reread from the segment. The fifth case is when the frame is "backed" by
a writable segment. In this case we write the data to swap, as we don't want
to overwrite the original segment, as this isn't actually a memory mapped
file.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

When creating a new mapped file, we check that all of the pages that it is
using are not already in the supplemental page table of the current thread.
If they are, this means that this page is already being used for something
else (such as another mapped file, the code segment, or the stack) and we
cannot allow mapping at that location.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Our implementation shares most of the code. We used the same "backed_file"
struct for both mapped files and for data segments. The different is that
we mark the backed files for data involved in segments with the boolean
is_segment, to make sure that they are not written back to the file in the
case of page evict and that they cannot be unmapped by unmap. We also use
the boolean "is_writable" to mark code segments which aren't writable, because
those do not need to be written to the swap table, unlike data segments which
are writable.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

As usual, this assignment was great! It took a lot of work, but all of it
was useful.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, we all feel like we now really understand virtual memory and memory
mapped files.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I think the rationale behind page pinning and the situations in which
it is necessary could have been explained a little better. We only really
understood it after someone asked a question on Piazza.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Having the TA go over the reference solution (like Adriana will be doing for
this project) is very helpful for learning.

>> Any other comments?

No.

Thank you!
